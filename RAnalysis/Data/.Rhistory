library('EnsDb.Hsapiens.v86') #replace with your organism-specific database package
library('rhdf5') #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library('tximport') # package for getting Kallisto results into R
library('ensembldb') #helps deal with ensembl
install.packages('rappdirs')
library('ensembldb') #helps deal with ensembl
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# OPTIONAL: get annotations using BiomaRt----
# The annotation method described in the code chunk above works great if an organism-specific data base package exists for your organisms of interest
# however, this is only the case for human, mouse and rat....
# so, this optional code chunk shows one way you can get annotation data for other target organisms
# in this example, we're retrieving 1:1 mappings between transcript identifiers and gene symbols for the domesticated dog (Canis familiaris)
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
available.datasets
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
dog.filters <- listFilters(dog.anno)
dog.filters
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
available.datasets
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
dog.filters <- listFilters(dog.anno)
dog.filters
dog.filters
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
dog.filters <- listFilters(dog.anno)
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
Tx.dog <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = dog.anno)
Tx.dog <- as_tibble(Tx.dog)
Tx.dog
#we need to rename the two columns we just retreived from biomart
Tx.dog <- dplyr::rename(Tx.dog, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
library(ggplot2)
data.table <- read.table("kopt.data", header = FALSE, col.names= c("k1","k2","Similarity", "Contigs"))
library(ggplot2)
data.table <- read.table("kopt.data", header = FALSE, col.names= c("k1","k2","Similarity", "Contigs"))
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
vcftools --help
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
library(ropls)
install.packages('ropls')
library(ropls)
library(ropls)
install.packages('ropls')
etails
rm(list=ls())
# Load packages and pacage version/date/import/depends info
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
library(ggplot2)        # Version 2.2.1, Packaged: 2016-12-30, Depends: R (>= 3.1)Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
library(tidyr)
library(ggpubr)
library(car)
library(gridExtra)
#set working directory---------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_histology/RAnalysis/Data") #set working
######################################################################### #
############################## DATA PREP ################################ #
######################################################################### #
# UPLOAD DATA------------------------------------------------------------------------------------------
staging<-read.csv("Staging/Hist_Staging_Kaitlyn.csv", header=T, sep=",", na.string="NA", as.is=T)
staging
Male_hist<-read.csv("Master_summary_male_acini.csv", header=T, sep=",", na.string="NA", as.is=T)
Male_hist # view data
Male_hist$Area = as.numeric(Male_hist$Area)
# PIVOT THE TABLE TO CALC RELATIVE VALUES--------------------------------------------------------------
Male_hist_2 <- Male_hist %>% dplyr::select(-c('Meas_num','Label','hue','saturation','brightness')) %>%
tidyr::pivot_wider(names_from=type, values_from=Area)
# CALC RELATIVE VALUES---------------------------------------------------------------------------------
Male_hist_2$perc_zoa <- (Male_hist_2$zoa/Male_hist_2$total_area)*100 # percent area of spermatozoa
Male_hist_2$perc_cytes <- ((Male_hist_2$cytes_zoa - Male_hist_2$zoa)/Male_hist_2$total_area)*100 # percent area of spermatocytes
Male_hist_2$perc_lumen <- (Male_hist_2$lumen/Male_hist_2$total_area)*100 # percent area of lumen
Male_hist_2$cytes <- (Male_hist_2$cytes_zoa - Male_hist_2$zoa) # area of spermatocytes
# convert to characer
typeof(Male_hist_2$ID)
typeof(Male_hist_2$Date)
Male_hist_2$Date <- as.character(Male_hist_2$Date)
Male_hist_cont_table <- Male_hist_2 %>% dplyr::filter('20190123' %in% Date) %>%  dplyr::select(Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table
Male_hist_cont_table <- Male_hist_2 %>% dplyr::filter('20190123' %in% Date) %>%  dplyr::select(Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Treatment,Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE),
num_acini   = n())
Male_hist_cont_table # view the table
Male_hist_cont_table
Male_hist_cont_table <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Treatment,Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE),
num_acini   = n())
Male_hist_cont_table # view the table
Male_hist_cont_table
Male_hist_cont_table <- Male_hist_2 %>% dplyr::filter('20190123' %in% Date) %>%  dplyr::select(Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <- Male_hist_2 \ %>%  dplyr::select(Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <- Male_hist_2  %>%  dplyr::select(Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <- Male_hist_2  %>%  dplyr::select(Date, Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Treatment,Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE),
num_acini   = n())
Male_hist_cont_table # view the table
Male_hist_cont_table
Male_hist_cont_table <- Male_hist_2  %>%  dplyr::select(Date, Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Treatment) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE),
num_acini   = n())
Male_hist_cont_table # view the table
Male_hist_cont_table <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Treatment,Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE),
num_acini   = n())
Male_hist_cont_table # view the table
Male_hist_2
Male_hist_cont_table <- Male_hist_2  %>%  dplyr::select(Date, Treatment, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table
Male_hist_cont_table <-
# dplyr::filter('20190123' %in% Date) %>%
Male_hist_cont_table <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Treatment,Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table # view the table
Male_contingencyTable <- Male_hist_cont_table %>% pivot_longer(
Male_hist_cont_table,
cols = starts_with("prop"),
names_to = "hist_meas",
values_to = "value"
)
Male_contingencyTable
Male_contingencyTable$ID <- paste(substr(Male_contingencyTable$Treatment,1,1), substr(Male_contingencyTable$Date,5,8), sep='_')
Male_contingencyTable
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2
Male_contingencyTable2 <- cast(Male_contingencyTable2, ID~hist_meas)
library(reshape)
Male_contingencyTable2 <- cast(Male_contingencyTable2, ID~hist_meas)
Male_contingencyTable2
Male_contingencyTable2 <- cast(Male_contingencyTable2, hist_meas~ID)
Male_contingencyTable2
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable$ID <- paste(substr(Male_contingencyTable$Treatment,1,1), substr(Male_contingencyTable$Date,5,8), sep='_')
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2 <- cast(Male_contingencyTable2, hist_meas~ID)
Male_contingencyTable2
# 1. convert the data as a table
MATRIX_Male_contingencyTable2 <- as.table(as.matrix(Male_contingencyTable2))
MATRIX_Male_contingencyTable2
# 2. Graph
library(gplots)
balloonplot(t(MATRIX_Male_contingencyTable2), main ="ID", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
# Chi squared test
chisq <- chisq.test(MATRIX_Male_contingencyTable2)
chisq
# Observed counts
chisq$observed
# Expected counts
round(chisq$expected,2)
chisq # note: df = num row -1 * num col -1
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2
Male_contingencyTable2 <- cast(Male_contingencyTable2, hist_meas~ID) # cast
Male_contingencyTable2
chisq <- chisq.test(MATRIX_Male_contingencyTable2) # Chi squared test
chisq # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
chisq$observed # Observed counts
chisq$expected # Observed counts
round(chisq$expected,2) # Expected counts
round(chisq$observed,2) # Observed rounded to 2 sig figs
round(chisq$expected,2) # Expected  rounded to 2 sig figs
round(chisq$residuals, 3) # Pearson residuals can be easily extracted from the output of the function chisq.test():
corrplot(chisq$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
library(corrplot)
corrplot(chisq$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
round(chisq$observed,2) # Observed rounded to 2 sig figs
contrib <- 100*chisq$residuals^2/chisq$statistic # Contibution in percentage (%)
round(contrib, 3)
corrplot(contrib, is.cor = FALSE) # Visualize the contribution
contrib <- 100*chisq$residuals^2/chisq$statistic # Contibution in percentage (%)
round(contrib, 3)
corrplot(contrib, is.cor = FALSE) # Visualize the contribution
# CALC THE MEAN FOR EACH SAMPLE-------------------------------------------------------------------------
Male_hist_2$ID2 <- as.numeric(Male_hist_2$ID)
chisq <- chisq.test(MATRIX_Male_contingencyTable2) # Chi squared test
chisq # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
round(chisq$observed,2) # Observed rounded to 2 sig figs
round(chisq$expected,2) # Expected  rounded to 2 sig figs
round(chisq$residuals, 3) # Pearson residuals can be easily extracted from the output of the function chisq.test():
corrplot(chisq$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
contrib <- 100*chisq$residuals^2/chisq$statistic # Contibution in percentage (%)
round(contrib, 3)
corrplot(contrib, is.cor = FALSE) # Visualize the contribution
corrplot(chisq$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
corrplot(contrib, is.cor = FALSE) # Visualize the contribution
chisq <- chisq.test(MATRIX_Male_contingencyTable2) # Chi squared test
chisq # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
contrib <- 100*chisq$residuals^2/chisq$statistic # Contibution in percentage (%)
round(contrib, 3)
# Run with ID combining both treatment and date
Male_contingencyTable$ID <- paste(substr(Male_contingencyTable$Treatment,1,1), substr(Male_contingencyTable$Date,5,8), sep='_')
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2
Male_contingencyTable2
Male_contingencyTable
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3
Male_contingencyTable3 <- cast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3
Male_contingencyTable3 <- cast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3
Male_contingencyTable3$Date <- as.character(Male_contingencyTable3$Date)
Male_contingencyTable3 <- cast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3$Date <- as.character(Male_contingencyTable3$Date) # change Date to a character variable
Male_contingencyTable3 <- cast(Male_contingencyTable3, Date~hist_meas) # cast to move categorical treatments as columns
Male_contingencyTable3
chisq <- chisq.test(MATRIX_Male_contingencyTable2) # Chi squared test
chisq # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
Male_contingencyTable2 <- cast(Male_contingencyTable2, hist_meas~ID) # cast to move categorical treatments as columns
MATRIX_Male_contingencyTable2 <- as.table(as.matrix(Male_contingencyTable2)) # 1. convert the data as a table
Male_contingencyTable2
# Run with ID combining both treatment and date
Male_contingencyTable$ID <- paste(substr(Male_contingencyTable$Treatment,1,1), substr(Male_contingencyTable$Date,5,8), sep='_')
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2 <- cast(Male_contingencyTable2, hist_meas~ID) # cast to move categorical treatments as columns
Male_contingencyTable2
Male_contingencyTable2
# Run with ID combining both treatment and date
Male_contingencyTable$ID <- paste(substr(Male_contingencyTable$Treatment,1,1), substr(Male_contingencyTable$Date,5,8), sep='_')
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3$Date <- as.character(Male_contingencyTable3$Date) # change Date to a character variable
Male_contingencyTable3
Male_contingencyTable3 <- cast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
library(reshape2)
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3$Date <- as.character(Male_contingencyTable3$Date) # change Date to a character variable
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3
Male_contingencyTable3
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3$Date <- as.character(Male_contingencyTable3$Date) # change Date to a character variable
Male_contingencyTable3
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas+Date) # cast to move categorical treatments as columns
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
Male_contingencyTable3
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_contingencyTable3 <- Male_contingencyTable %>% dplyr::select(c(Date,value,hist_meas))
Male_contingencyTable3 <- Male_contingencyTable3[,-1]
Male_contingencyTable3$Date <- as.character(Male_contingencyTable3$Date) # change Date to a character variable
Male_contingencyTable3
Male_contingencyTable2
Male_contingencyTable2 <- cast(Male_contingencyTable2, hist_meas~ID) # cast to move categorical treatments as columns
Male_contingencyTable2
Male_contingencyTable3$Date <- as.character(substr(Male_contingencyTable3$Date,5,8)
Male_contingencyTable3
Male_contingencyTable3$Date <- as.character(substr(Male_contingencyTable3$Date,5,8))
Male_contingencyTable3
Male_contingencyTable3 <- dcast(Male_contingencyTable3, hist_meas~Date) # cast to move categorical treatments as columns
# Run with ID combining both treatment and date
Male_contingencyTable$ID <- paste(substr(Male_contingencyTable$Treatment,1,1), substr(Male_contingencyTable$Date,5,8), sep='_')
Male_contingencyTable2 <- Male_contingencyTable %>% dplyr::select(c(ID,value,hist_meas))
Male_contingencyTable2 <- Male_contingencyTable2[,-1]
Male_contingencyTable2
Male_hist_cont_table
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_hist_cont_table3 <-
Male_hist_2 %>%
# dplyr::filter('20190123' %in% Date) %>%
# dplyr::select(-c('ID','Date','') %>% # remove unecessary columns
group_by(Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table3 # view the table
Male_hist_cont_table3 <- Male_hist_cont_table3 %>% pivot_longer(
Male_hist_cont_table,
cols = starts_with("prop"),
names_to = "hist_meas",
values_to = "value"
)
Male_hist_cont_table3
Male_contingencyTable3$Date <- as.character(substr(Male_contingencyTable3$Date,5,8))
Male_contingencyTable3
# NOTE: since we do see an affect of time in ANOVA - run with time and without treatment chi-squared
# Run with ID just as time
Male_hist_cont_table3 <-
Male_hist_2 %>%
group_by(Date) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table3 # view the table
Male_hist_cont_table3 <- Male_hist_cont_table3 %>% pivot_longer(
Male_hist_cont_table,
cols = starts_with("prop"),
names_to = "hist_meas",
values_to = "value"
)
Male_hist_cont_table3
Male_hist_cont_table3 # view the table
Male_hist_cont_table3$Date <- as.character(substr(Male_hist_cont_table3$Date,5,8))
Male_hist_cont_table3
Male_hist_cont_table3 <- cast(Male_hist_cont_table3, hist_meas~Date) # cast to move categorical treatments as columns
Male_hist_cont_table3
MATRIX_Male_hist_cont_table3 <- as.table(as.matrix(Male_hist_cont_table3)) # 1. convert the data as a table
balloonplot(t(MATRIX_Male_hist_cont_table3), main ="Date", xlab ="", ylab="", label = FALSE, show.margins = FALSE) # 2. Graph
balloonplot(t(MATRIX_Male_hist_cont_table3), main ="Date", xlab ="", ylab="", label = FALSE, show.margins = FALSE) # 2. Graph
chisq.date <- chisq.test(MATRIX_Male_hist_cont_table3) # Chi squared test
chisq.date # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
round(chisq.date$observed,2) # Observed rounded to 2 sig figs
round(chisq.date$expected,2) # Expected  rounded to 2 sig figs
round(chisq.date$residuals, 3) # Pearson residuals can be easily extracted from the output of the function chisq.test():
corrplot(chisq.date$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
contrib.date <- 100*chisq.date$residuals^2/chisq.date$statistic # Contibution in percentage (%)
round(contrib.date, 3)
corrplot(contrib.date, is.cor = FALSE) # Visualize the contribution
chisq.date <- chisq.test(MATRIX_Male_hist_cont_table3) # Chi squared test
chisq.date # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
Male_hist_2
######################################################################### #
###LINEAR REG WITH STAGE AS INDEP VAR  ############################### #
######################################################################### #
Male_hist_2$Geoduck_ID <-Male_hist_2$ID
staging_coltrim <- staging %>% dplyr::select(c('Geoduck_ID','Geoduck_ID','Stage_ID','Staging_number'))
MaleHistStage_merge <- merge(Male_hist_2,staging_coltrim,by="Geoduck_ID")
MaleHistStage_merge
# contingency table with staging ID
MaleHistStage_merge # dataset
Male_hist_cont_table_STAGE <- MaleHistStage_merge  %>%  dplyr::select(Date, Treatment, Stage_ID, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE <-
Male_hist_cont_table_STAGE %>%
group_by(Stage_ID,Treatment) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table_STAGE <- Male_hist_cont_table_STAGE %>% pivot_longer(
Male_hist_cont_table_STAGE,
cols = starts_with("prop"),
names_to = "hist_meas",
values_to = "value")
Male_hist_cont_table_STAGE # view the table
Cont_table_STAGE <- cast(Male_hist_cont_table_STAGE, hist_meas~Stage_ID) # cast to move categorical treatments as columns
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE$ID <- paste(substr(Male_hist_cont_table_STAGE$Treatment, 1,3), Male_hist_cont_table_STAGE$Stage_ID, sept="_")
Male_hist_cont_table_STAGE <-
Male_hist_cont_table_STAGE %>%
group_by(ID) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE$ID <- paste(substr(Male_hist_cont_table_STAGE$Treatment, 1,3), Male_hist_cont_table_STAGE$Stage_ID, sep="_")
Male_hist_cont_table_STAGE <-
Male_hist_cont_table_STAGE %>%
group_by(ID) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table_STAGE
MaleHistStage_merge
Male_hist_cont_table_STAGE <- Male_hist_cont_table_STAGE %>% dplyr::select(ID, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE <- MaleHistStage_merge  %>%  dplyr::select(Date, Treatment, Stage_ID, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table_STAGE$ID <- paste(substr(Male_hist_cont_table_STAGE$Treatment, 1,3), Male_hist_cont_table_STAGE$Stage_ID, sep="_")
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE <- Male_hist_cont_table_STAGE %>% dplyr::select(ID, )
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE <- MaleHistStage_merge  %>%  dplyr::select(Date, Treatment, Stage_ID, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table_STAGE$ID <- paste(substr(Male_hist_cont_table_STAGE$Treatment, 1,3), Male_hist_cont_table_STAGE$Stage_ID, sep="_")
Male_hist_cont_table_STAGE <- Male_hist_cont_table_STAGE %>% dplyr::select(ID, perc_cytes, perc_lumen, perc_zoa)
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE <-
Male_hist_cont_table_STAGE %>%
group_by(ID) %>%
summarize(
prop_zoa    = mean(perc_zoa, na.rm = TRUE),
prop_cytes  = mean(perc_cytes, na.rm = TRUE),
prop_lumen  = mean(perc_lumen, na.rm = TRUE))
Male_hist_cont_table_STAGE
Male_hist_cont_table_STAGE <- Male_hist_cont_table_STAGE %>% pivot_longer(
Male_hist_cont_table_STAGE,
cols = starts_with("prop"),
names_to = "hist_meas",
values_to = "value")
Male_hist_cont_table_STAGE # view the table
Cont_table_STAGE <- cast(Male_hist_cont_table_STAGE, hist_meas~ID) # cast to move categorical treatments as columns
MATRIX_Cont_table_STAGE <- as.table(as.matrix(Cont_table_STAGE)) # 1. convert the data as a table
balloonplot(t(MATRIX_Cont_table_STAGE), main ="ID", xlab ="", ylab="", label = FALSE, show.margins = FALSE) # 2. Graph
chisq.STAGE <- chisq.test(MATRIX_Cont_table_STAGE) # Chi squared test
chisq.STAGE # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
round(chisq.STAGE$observed,2) # Observed rounded to 2 sig figs
round(chisq.STAGE$expected,2) # Expected  rounded to 2 sig figs
round(chisq.STAGE$residuals, 3) # Pearson residuals can be easily extracted from the output of the function chisq.test():
corrplot(chisq.STAGE$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
contrib.STAGE<- 100*chisq.STAGE$residuals^2/chisq.STAGE$statistic # Contibution in percentage (%)
round(contrib.STAGE, 3)
corrplot(contrib.STAGE, is.cor = FALSE) # Visualize the contribution
contrib.STAGE<- 100*chisq.STAGE$residuals^2/chisq.STAGE$statistic # Contibution in percentage (%)
corrplot(chisq.STAGE$residuals, is.cor = FALSE) # visualize Pearson residuals using the package corrplot:
chisq.STAGE # note: df = num row -1 * num col -1 - Chi Sq test is NOT significant
