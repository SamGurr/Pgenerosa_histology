knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
```{r pressure, echo=FALSE}
**Bold**
**Bold**
#**Bold**
#*Itlaics*
#**Bold**
#*Itlaics*
# **Bold**
# *Itlaics*
**Bold**
colnames("")
colnames()
colnames(gapminder)
library(tidyverse)
library(gapminder)
library(lubridate)
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
teacher_student_research # view the dataset
ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
facet_wrap(~year) +
geom_point()
GDP_lifeEXP
knitr::opts_chunk$set(echo = TRUE)
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gapminder)
library(lubridate)
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
teacher_student_research # view the dataset
dir.exists()
knitr::opts_chunk$set(echo = TRUE)
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
colnames(gapminder)# "country"   "continent" "year"      "lifeExp"   "pop"       "gdpPercap"
colnames(gapminder)# "country"   "continent" "year"      "lifeExp"   "pop"       "gdpPercap"
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gapminder)
library(lubridate)
teacher_student_research <- read_csv('https://tinyurl.com/student-teacher')
teacher_student_research # view the dataset
gapminder # view the dataset
colnames(gapminder)# "country"   "continent" "year"      "lifeExp"   "pop"       "gdpPercap"
unique(gapminder$year)
colnames(teacher_student_research)
unique(teacher_student_research$year)
colnames(teacher_student_research)
unique(teacher_student_research$year)
unique(teacher_student_research$country)
count(teacher_student_research$country)
colnames(teacher_student_research)
unique(teacher_student_research$year)
unique(teacher_student_research$country)
teacher_student_research %>% group_by(country) %>% summarise(COUNT = n())
colnames(teacher_student_research)
unique(teacher_student_research$year)
unique(teacher_student_research$country)
teacher_student_research %>% group_by(continent) %>% summarise(COUNT = n())
colnames(teacher_student_research)
unique(teacher_student_research$year)
unique(teacher_student_research$country)
teacher_student_research %>% group_by(country) %>% summarise(COUNT = n())
colnames(teacher_student_research)
unique(teacher_student_research$year)
unique(teacher_student_research$country)
teacher_student_research %>%  summarise(COUNT = n(country))
View(teacher_student_research)
colnames(gapminder)
unique(gapminder$year)
unique(teacher_student_research$country)
gapminder_NEWEST <- gapminder %>% filter(year == "2007") %>% # select only the 2007 newest data
select("country", "continent", "pop", "gdpPercap")
stud_teach_pop_product <- merge(teacher_student_ratio, gapminder_NEWEST, by = "country")
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country") %>%
select!("flag_codes", "flags")
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product <- stud_teach_pop_product %>%  select!("flag_codes", "flags")
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product_2 <- stud_teach_pop_product %>%  filter(!is.na(student_ratio)) %>%
select(-"flags", -"flag_codes", -"country_code")
stud_teach_pop_product
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product_2 <- stud_teach_pop_product %>%  filter(!is.na(student_ratio)) %>%
select(-"flags", -"flag_codes", -"country_code")
stud_teach_pop_product_2
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product_2 <- stud_teach_pop_product %>%  filter(!is.na(student_ratio)) %>%
select(-"flags", -"flag_codes", -"country_code", -"edulit_ind")
stud_teach_pop_product_2
stud_teach_pop_product <- merge(teacher_student_research, gapminder_NEWEST, by = "country")
stud_teach_pop_product_2 <- stud_teach_pop_product %>%  filter(!is.na(student_ratio)) %>%
select(-"flags", -"flag_codes", -"country_code", -"edulit_ind")
head(stud_teach_pop_product_2)
SUMTAB_continent_year_summary <-
stud_teach_pop_product %>%
group_by(year, continent, indicator) %>% # group by the time period and the month
summarize(Av_student_ratio = mean(student_ratio),
Av_pop = mean(pop),
Av_product = mean(gdpPercap))
SUMTAB_continent_year_summary <- map(SUMTAB_continent_year, summary)
SUMTAB_continent_year <-
stud_teach_pop_product %>%
group_by(year, continent, indicator) %>% # group by the time period and the month
summarize(Av_student_ratio = mean(student_ratio),
Av_pop = mean(pop),
Av_product = mean(gdpPercap))
SUMTAB_continent_year_summary <- map(SUMTAB_continent_year, summary)
SUMTAB_continent_year <-
stud_teach_pop_product %>%
group_by(year, continent, indicator) %>% # group by the time period and the month
summarize(Av_student_ratio = mean(student_ratio),
Av_pop = mean(pop),
Av_product = mean(gdpPercap))
SUMTAB_continent_year
SUMTAB_continent_year_summary <- map(SUMTAB_continent_year, summary)
SUMTAB_continent_year_summary
SUMTAB_continent_year <-
stud_teach_pop_product %>%
group_by(indicator, year, continent) %>% # group by the time period and the month
summarize(Av_student_ratio = mean(student_ratio),
Av_pop = mean(pop),
Av_product = mean(gdpPercap))
SUMTAB_continent_year
SUMTAB_continent_year_summary <- map(SUMTAB_continent_year, summary)
SUMTAB_continent_year_summary
SUMTAB_continent_year <-
stud_teach_pop_product_2 %>%
group_by(indicator, year, continent) %>% # group by the time period and the month
summarize(Av_student_ratio = mean(student_ratio),
Av_pop = mean(pop),
Av_product = mean(gdpPercap))
SUMTAB_continent_year
SUMTAB_continent_year_summary <- map(SUMTAB_continent_year, summary)
SUMTAB_continent_year_summary
knitr::opts_chunk$set(
echo = TRUE,
fig.path = "project1figs/",
fig.width = 8,
warning = FALSE)
install.packages("tidyverse")
library(tidyverse)
library(gapminder)
library(gridExtra)
gapminder_data <- gapminder::gapminder
student_teacher_data <- read.csv('https://tinyurl.com/student-teacher')
gapminder_data
student_teacher_data
# Run Primer3
/Users/samjg/software/primer3-2.4.0/src/primer3_core \
--format_output \
--output= Analysis/20200320_geoduck_NADH_primers/20200320_primer3_PGEN_.00g299160_wholegene.txt
\
Analysis/20200320_geoduck_NADH_primers/20200320_NADH_primer3_params.txt
install.packages(EMBOSS)
install.packages(primersearch)
install.packages("reticulate")
## -------------------------------------------------------------------------------------------------
# create a pie chart with slice labels
g<-ggPie(mpg,aes(pies=drv))
##---
# R code for Data Vislization with R
#  Guangyu Zhu
#  guangyuzhu@uri.edu
## -----
library(ggplot2)
library(GGally)
theme_set(theme_bw())
library(magrittr)
library(tidyverse)
library(scales)
library(ggiraph)
library(ggiraphExtra)
library(plotly)
install.packages(GGally)
install.packages('GGally')
library(GGally)
theme_set(theme_bw())
library(magrittr)
library(tidyverse)
library(scales)
library(ggiraph)
install.packages('ggiraph')
library(ggiraphExtra)
library(plotly)
##---
# R code for Data Vislization with R
#  Guangyu Zhu
#  guangyuzhu@uri.edu
## -----
library(ggplot2)
library(GGally)
library(magrittr)
library(tidyverse)
library(scales)
library(ggiraph)
library(ggiraphExtra)
library(plotly)
install.packages('ggiraphExtra')
library(ggiraphExtra)
library(plotly)
install.packages('plotly')
install.packages("plotly")
---
library(ggplot2)
library(GGally)
theme_set(theme_bw())
library(magrittr)
library(tidyverse)
library(scales)
library(ggiraph)
library(ggiraphExtra)
library(plotly)
## ----results='asis'-------------------------------------------------------------------------------
dat<- mpg%>%dplyr::count(drv)%>% mutate(prop=n/sum(n)*100)
dat
g<-ggplot(dat,aes(x = drv, tooltip = paste0(round(prop,2),'%'),
data_id = drv, y=prop/100))+
geom_bar_interactive(stat='identity',fill = "cornflowerblue", color="black")+
scale_y_continuous(labels = scales::percent)+
labs(y='Percent',title='Percent of cars in each level of drv')
girafe(print(g))
## ----results='asis'-------------------------------------------------------------------------------
dat<- mpg%>%dplyr::count(drv)%>% mutate(prop=n/sum(n)*100)
dat
g<-ggplot(dat,aes(x = drv, tooltip = paste0(round(prop,2),'%'),
data_id = drv, y=prop/100))+
geom_bar_interactive(stat='identity',fill = "cornflowerblue", color="black")+
scale_y_continuous(labels = scales::percent)+
labs(y='Percent',title='Percent of cars in each level of drv')
runif(1, min=0, max=100)
floor(runif(1, min=1, max=10))
floor(runif(1, min=1, max=3))
floor(runif(1, min=1, max=3))
floor(runif(1, min=1, max=3))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
runif(1, min=1, max=2)
runif(1, min=1, max=2)
runif(1, min=1, max=2)
runif(1, min=1, max=2)
floor(runif(1, min=1, max=1000))
floor(runif(1, min=1, max=1000))
floor(runif(1, min=1, max=1000))
floor(runif(10, min=1, max=1000))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
library(BiocManager)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
?DESeqDataSetFromMatrix
library(yaml)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
?DESeqDataSetFromMatrix
library("yaml", lib.loc="~/R/win-library/3.5")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
ds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
library(airway)
install.packages('airway')
library(airway)
BiocManager::install("airway")
library(airway)
airway
data(airway)
airway
assay(airway, "counts")[1:3,1:3]
assay(airway, "counts")[1:10,1:3]
airway # view the data specs
assay(airway, "counts")[1:10,1:10]
assay(airway, "counts")[1:10,1:4]
assay(airway, "counts")[1:10,1:5]
assay(airway, "counts")[1:10,1:6]
assay(airway, "counts")[1:10,1:7]
assay(airway, "counts")[1:10,1:8]
assay(airway, "counts")[1:10,1:9]
assay(airway, "counts")[1:10,1:8]
count(colnames(airway))
colnames(airway)
list(colnames(airway))
n(colnames(airway))
sum(colnames(airway))
rownames(airway)
airway$dex
# the first level is the reference level for this factor
# use the command relevel() to use the untrt level as a reference below
airway$dex <- relevel(airway$dex, "untrt")
airway$dex
granges(airway)
library(DESeq2)
dds <- DESeqDataSet(airway, design = ~dex)
dds <- DESeqDataSet(airway, design = ~dex)
library(DESeq2)
isntall.packages("ggplot2")
library("ggplot2")
library(ggplot2)
install.packages('ggplot2')
library(DESeq2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(DESeq2)
install.packages('htmlTable')
library(DESeq2)
library(htmltable)
library(htmlTable)
library("DESeq2", lib.loc="~/R/win-library/3.5")
dds <- DESeqDataSet(airway, design = ~dex)
install.packages('DESeq2')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
library("DESeq2", lib.loc="~/R/win-library/3.5")
detach("package:DESeq2", unload=TRUE)
library("DESeq2", lib.loc="~/R/win-library/3.5")
library(htmlTable)
install.packages("htmlTable")
library(htmlTable)
library(htmlTable)
install.packages('htmlTable')
install.packages('xfun')
library(xfun)
install.packages('xfun')
install.packages("xfun", repo = 'cran.r-project.org')
install.packages("xfun", repo = 'https://cran.r-project.org')
install.packages("xfun")
update.packages("xfun")
install.packages("xfun")
install.packages("C:/Users/samjg/Downloads/xfun_0.16.zip", repos = NULL, type = "win.binary")
library(DESeq2)
library(xfun)
library(htmlTable)
install.packages('htmlTable')
library(htmlTable)
library(knitr)
isntall.packages('knitr')
install.packages('knitr')
library(knitr)
install.packages("C:/Users/samjg/Downloads/knitr_1.29.zip", repos = NULL, type = "win.binary")
library(knitr)
library(htmlTable)
install.packages('htmlTable')
library(htmlTable)
install.packages("rlang")
library(htmlTable)
install.packages('htmlTable')
install.packages("Rcpp")
install.packages('htmlTable')
library(htmlTable)
install.packages('htmlTable')
install.packages("C:/Users/samjg/Downloads/htmlTable_2.0.1.zip", repos = NULL, type = "win.binary")
library(htmlTable)
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
dds <- DESeqDataSet(airway, design = ~dex)
install.packages('tidyselect')
install.packages("tidyselect")
install.packages("C:/Users/samjg/Downloads/tidyselect_1.1.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/samjg/Downloads/rlang_0.4.7.zip", repos = NULL, type = "win.binary")
BiocManager::install("DESeq2")
library(DESeq2)
dds <- DESeqDataSet(airway, design = ~dex)
library("DESeq2", lib.loc="~/R/win-library/3.5")
?DESeqDataSet
remove.packages("DESeq2", lib="~/R/win-library/3.5")
BiocManager::install("DESeq2")
library(DESeq2)
install.packages("C:/Users/samjg/AppData/Local/Temp/RtmpSABeXP/downloaded_packages/DESeq2_1.22.2.zip", repos = NULL, type = "win.binary")
library(DESeq2)
library("DESeq2", lib.loc="~/R/win-library/3.5")
env <- asNamespace("MASS")
head(getNamespaceInfo(env, "S3methods"))
update.packages(ask = FALSE, checkBuilt = TRUE)
R
updateR()
install.packages("installr")
library(installr)
updateR()
# Load packages and pacage version/date/import/depends info
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
.libPaths()
library(ggplot2)        # Version 2.2.1, Packaged: 2016-12-30, Depends: R (>= 3.1)Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
library(tidyr)
library(ggpubr)
library(car)
.libPaths()
.libPaths( c( "C:/Users/samjg/Documents/R/win-library/4.0" , .libPaths() ) )
.libPaths()
.libPaths( c( "~/4.0" , .libPaths() ) )
.libPaths()
.libPaths()
library(ggpubr)
#Title: Pgenerosa histology (Acini)
#Project: FFAR
#Author: Sam Gurr
#Edit by: Sam Gurr
#Date Last Modified: 20200729
#See Readme file for details
update.packages(checkBuilt=TRUE, ask=FALSE)
#Title: Pgenerosa histology (Acini)
#Project: FFAR
#Author: Sam Gurr
#Edit by: Sam Gurr
#Date Last Modified: 20200729
#See Readme file for details
update.packages(checkBuilt=TRUE, ask=FALSE)
library(ggpubr)
.libPaths()
.libPaths(c(.libPaths(), "C:/Users/samjg/Documents/R/win-library/4.0"))
.libPaths()
library(car)
library(ggpubr)
library(tidyr)
# Load packages and pacage version/date/import/depends info
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
library(ggplot2)        # Version 2.2.1, Packaged: 2016-12-30, Depends: R (>= 3.1)Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
# UPLOAD DATA------------------------------------------------------------------------------------------
dat<-read.csv("Master_summary_male_acini.csv", header=T, sep=",", na.string="NA", as.is=T)
#set working directory---------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_histology/RAnalysis/Data") #set working
# UPLOAD DATA------------------------------------------------------------------------------------------
dat<-read.csv("Master_summary_male_acini.csv", header=T, sep=",", na.string="NA", as.is=T)
dat # view data
#set working directory---------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_histology/RAnalysis/Data") #set working
# UPLOAD DATA------------------------------------------------------------------------------------------
dat<-read.csv("Master_summary_male_acini.csv", header=T, sep=",", na.string="NA", as.is=T)
rm(list=ls())
#set working directory---------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_histology/RAnalysis/Data") #set working
# UPLOAD DATA------------------------------------------------------------------------------------------
dat<-read.csv("Master_summary_male_acini.csv", header=T, sep=",", na.string="NA", as.is=T)
dat # view data
# Load packages and pacage version/date/import/depends info
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
library(ggplot2)        # Version 2.2.1, Packaged: 2016-12-30, Depends: R (>= 3.1)Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
library(tidyr)
library(ggpubr)
library(car)
#set working directory---------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_histology/RAnalysis/Data") #set working
# UPLOAD DATA------------------------------------------------------------------------------------------
dat<-read.csv("Master_summary_male_acini.csv", header=T, sep=",", na.string="NA", as.is=T)
dat # view data
dat$Area = as.numeric(dat$Area)
# PIVOT THE TABLE TO CALC RELATIVE VALUES--------------------------------------------------------------
dat2 <- dat %>% dplyr::select(-c('Meas_num','Label','hue','saturation','brightness')) %>%
tidyr::pivot_wider(names_from=type, values_from=Area)
# CALC RELATIVE VALUES---------------------------------------------------------------------------------
dat2$TOTAL_AREA <- (dat2$cytes_zoa + dat2$lumen)
dat2$perc_zoa <- (dat2$zoa/dat2$TOTAL_AREA)*100 # percent area of spermatozoa
dat2$perc_cytes <- ((dat2$cytes_zoa - dat2$zoa)/dat2$TOTAL_AREA)*100 # percent area of spermatocytes
dat2$perc_lumen <- (dat2$lumen/dat2$TOTAL_AREA)*100 # percent area of lumen
dat2$zoa_cyte_ratio <- (dat2$zoa/(dat2$cytes_zoa - dat2$zoa)) # ratio of spermatozoa : spermatocytes
dat2$cytes <- (dat2$cytes_zoa - dat2$zoa) # area of spermatocytes
# CALC THE MEAN FOR EACH SAMPLE-------------------------------------------------------------------------
Means_Table <- dat2 %>%
dplyr::select(-'acini_segment') %>% # remove unecessary columns
group_by(ID,Treatment,Date) %>%
summarize(
mean_zoa= mean(zoa, na.rm = TRUE),
mean_cytes = mean(cytes, na.rm = TRUE),
mean_lumen= mean(lumen, na.rm = TRUE),
mean_perc_zoa= mean(perc_zoa, na.rm = TRUE),
mean_perc_cytes = mean(perc_cytes, na.rm = TRUE),
mean_perc_lumen= mean(perc_lumen, na.rm = TRUE),
mean_zoa_cyte_ratio = mean(zoa_cyte_ratio, na.rm = TRUE),
num_acini=n())
Means_Table # view the table
# PIVOT LONGER-----------------------------------------------------------------------------------------
Means_Table_long <- Means_Table %>%
tidyr::pivot_longer(cols = c(4:10), names_to='scoring_metric', values_to='means')
#  PLOTS----------------------------------------------------------------------------------------
Means_Table_long$Date_Treat <- paste((substr(Means_Table_long$Date,5,8)),Means_Table_long$Treatment, sep ="_")
plot <- ggboxplot(Means_Table_long, x = "Date_Treat", y = "means",  fill = "Treatment",
palette = c("#FC4E07","#00AFBB"), add = "none")
plot2 <- plot %>% ggadd(shape ="Treatment",fill = "white") %>% ggadd("jitter", size = 4,shape ="Treatment",fill = "white") +
facet_wrap( ~ scoring_metric, ncol=2, scales = "free") + theme_classic()
plot2
