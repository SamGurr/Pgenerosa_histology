dat
g<-ggplot(dat,aes(x = drv, tooltip = paste0(round(prop,2),'%'),
data_id = drv, y=prop/100))+
geom_bar_interactive(stat='identity',fill = "cornflowerblue", color="black")+
scale_y_continuous(labels = scales::percent)+
labs(y='Percent',title='Percent of cars in each level of drv')
runif(1, min=0, max=100)
floor(runif(1, min=1, max=10))
floor(runif(1, min=1, max=3))
floor(runif(1, min=1, max=3))
floor(runif(1, min=1, max=3))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
floor(runif(1, min=1, max=2))
runif(1, min=1, max=2)
runif(1, min=1, max=2)
runif(1, min=1, max=2)
runif(1, min=1, max=2)
floor(runif(1, min=1, max=1000))
floor(runif(1, min=1, max=1000))
floor(runif(1, min=1, max=1000))
floor(runif(10, min=1, max=1000))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
library(BiocManager)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
?DESeqDataSetFromMatrix
library(yaml)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
?DESeqDataSetFromMatrix
library("yaml", lib.loc="~/R/win-library/3.5")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
ds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design= ~ batch + condition)
library(airway)
install.packages('airway')
library(airway)
BiocManager::install("airway")
library(airway)
airway
data(airway)
airway
assay(airway, "counts")[1:3,1:3]
assay(airway, "counts")[1:10,1:3]
airway # view the data specs
assay(airway, "counts")[1:10,1:10]
assay(airway, "counts")[1:10,1:4]
assay(airway, "counts")[1:10,1:5]
assay(airway, "counts")[1:10,1:6]
assay(airway, "counts")[1:10,1:7]
assay(airway, "counts")[1:10,1:8]
assay(airway, "counts")[1:10,1:9]
assay(airway, "counts")[1:10,1:8]
count(colnames(airway))
colnames(airway)
list(colnames(airway))
n(colnames(airway))
sum(colnames(airway))
rownames(airway)
airway$dex
# the first level is the reference level for this factor
# use the command relevel() to use the untrt level as a reference below
airway$dex <- relevel(airway$dex, "untrt")
airway$dex
granges(airway)
library(DESeq2)
dds <- DESeqDataSet(airway, design = ~dex)
dds <- DESeqDataSet(airway, design = ~dex)
library(DESeq2)
isntall.packages("ggplot2")
library("ggplot2")
library(ggplot2)
install.packages('ggplot2')
library(DESeq2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(DESeq2)
install.packages('htmlTable')
library(DESeq2)
library(htmltable)
library(htmlTable)
library("DESeq2", lib.loc="~/R/win-library/3.5")
dds <- DESeqDataSet(airway, design = ~dex)
install.packages('DESeq2')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
library("DESeq2", lib.loc="~/R/win-library/3.5")
detach("package:DESeq2", unload=TRUE)
library("DESeq2", lib.loc="~/R/win-library/3.5")
library(htmlTable)
install.packages("htmlTable")
library(htmlTable)
library(htmlTable)
install.packages('htmlTable')
install.packages('xfun')
library(xfun)
install.packages('xfun')
install.packages("xfun", repo = 'cran.r-project.org')
install.packages("xfun", repo = 'https://cran.r-project.org')
install.packages("xfun")
update.packages("xfun")
install.packages("xfun")
install.packages("C:/Users/samjg/Downloads/xfun_0.16.zip", repos = NULL, type = "win.binary")
library(DESeq2)
library(xfun)
library(htmlTable)
install.packages('htmlTable')
library(htmlTable)
library(knitr)
isntall.packages('knitr')
install.packages('knitr')
library(knitr)
install.packages("C:/Users/samjg/Downloads/knitr_1.29.zip", repos = NULL, type = "win.binary")
library(knitr)
library(htmlTable)
install.packages('htmlTable')
library(htmlTable)
install.packages("rlang")
library(htmlTable)
install.packages('htmlTable')
install.packages("Rcpp")
install.packages('htmlTable')
library(htmlTable)
install.packages('htmlTable')
install.packages("C:/Users/samjg/Downloads/htmlTable_2.0.1.zip", repos = NULL, type = "win.binary")
library(htmlTable)
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
dds <- DESeqDataSet(airway, design = ~dex)
install.packages('tidyselect')
install.packages("tidyselect")
install.packages("C:/Users/samjg/Downloads/tidyselect_1.1.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/samjg/Downloads/rlang_0.4.7.zip", repos = NULL, type = "win.binary")
BiocManager::install("DESeq2")
library(DESeq2)
dds <- DESeqDataSet(airway, design = ~dex)
library("DESeq2", lib.loc="~/R/win-library/3.5")
?DESeqDataSet
remove.packages("DESeq2", lib="~/R/win-library/3.5")
BiocManager::install("DESeq2")
library(DESeq2)
install.packages("C:/Users/samjg/AppData/Local/Temp/RtmpSABeXP/downloaded_packages/DESeq2_1.22.2.zip", repos = NULL, type = "win.binary")
library(DESeq2)
library("DESeq2", lib.loc="~/R/win-library/3.5")
env <- asNamespace("MASS")
head(getNamespaceInfo(env, "S3methods"))
update.packages(ask = FALSE, checkBuilt = TRUE)
R
updateR()
install.packages("installr")
library(installr)
updateR()
# Load packages -----
library(tidyverse) # you know it well by now!
library(limma) # venerable package for differential gene expression using linear modeling
library(edgeR)
library(gt)
library(DT)
library(plotly)
library(plotly)
# Introduction to this script -----------
# the goal of this script is to identify differentially expressed genes (DEGs) and differential transcript usage (DTU)
# you should already know which pairwise comparisons are most important to you
# whether you look for differential expression at the gene or transcript level depends on how you read the Kallisto output into R using TxImport back in Step 1
# if you have no biological replicates, you will NOT be able to leverage statistical tools for differential expression analysis
# instead, you will ONLY rely on fold changes, and can use the dplyr 'verbs' we discussed in Step 3 and 4 to identify genes based on log fold-change
install.packages('limma')
install.packages('edgeR')
install.packages('gt')
install.packages('DT')
install.packages("DT")
# Load packages -----
library(tidyverse) # you know it well by now!
library(limma) # venerable package for differential gene expression using linear modeling
# Introduction to this script -----------
# the goal of this script is to identify differentially expressed genes (DEGs) and differential transcript usage (DTU)
# you should already know which pairwise comparisons are most important to you
# whether you look for differential expression at the gene or transcript level depends on how you read the Kallisto output into R using TxImport back in Step 1
# if you have no biological replicates, you will NOT be able to leverage statistical tools for differential expression analysis
# instead, you will ONLY rely on fold changes, and can use the dplyr 'verbs' we discussed in Step 3 and 4 to identify genes based on log fold-change
install.packages('limma')
# Set up your design matrix ----
group <- factor(targets$group)
design <- model.matrix(~0 + group)
# Set up your design matrix ----
group <- factor(targets$group)
?factor
exit
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install.packages('rhdf5')
install.packages('tximport')
install.packages('ensembldb')
install.packages('EnsDb.Hsapiens.v86')
install.packages('beepr')
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
# load packages----
library(devtools)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('devtools')
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install.packages('devtools')
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
# load packages----
library(devtools)
install.packages('remotes')
# load packages----
library(devtools)
install.packages('sessioninfo')
# load packages----
library(devtools)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
install_version('tximport')
install_version('beepr')
install_version('EnsDb.Hsapiens.v86')
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('Rtools')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
Sys.which("make")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5', type = "source")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install.packages('rhdf5', type = "source")
install_version('tximport', type = "source")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install.packages('rhdf5', type = "source")
install.packages('tximport', type = "source")
install.packages('ensembldb', type = "source")
install.packages('EnsDb.Hsapiens.v86', type = "source")
# load packages----
library(devtools)
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5', type = "source")
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
install_version('rhdf5')
install_version('tximport')
install_version('ensembldb')
install_version('EnsDb.Hsapiens.v86')
install_version("tximport")
install_version(tximport)
# load packages----
library(devtools)
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
install.packages('EnsDb.Hsapiens.v86')
BiocManager::install(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
BiocManager::install('EnsDb.Hsapiens.v86') #replace with your organism-specific database package
BiocManager::install('ensembldb') #helps deal with ensembl
BiocManager::install('ensembldb') #helps deal with ensembl
BiocManager::install('rhdf5') #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
BiocManager::install('tximport') # package for getting Kallisto results into R
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
.libPaths()
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
avail <- BiocManager::available()
length(avail)
# Introduction to the Step 1 script----
# Step 1 Learning Objectives:
# 1 - Step 1 serves as your gateway to R scripts and, as such, you will learn the proper 'anatomy' for any R script.
# 2 - Learn how to install packages and load libraries into your R environment
# 3 - Understand the various file types that describe RNAseq data and how to import these files (e.g. kallisto read mapping data) into R
# 4 - Learn basic tools for annotation
.libPaths()
# Notes:
# This script is organized into 'chunks' of code, and the final chunk (called 'the essentials') is a minimal representation of this script.
BiocManager::install(c('tximport','ensembldb','EnsDb.Hsapiens.v86'), lib = "C:/Users/samjg/Documents/R/win-library/4.0")
library(beepr) #just for fun
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library('tximport') # package for getting Kallisto results into R
library('ensembldb') #helps deal with ensembl
library('EnsDb.Hsapiens.v86') #replace with your organism-specific database package
library('rhdf5') #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library('tximport') # package for getting Kallisto results into R
library('ensembldb') #helps deal with ensembl
install.packages('rappdirs')
library('ensembldb') #helps deal with ensembl
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# OPTIONAL: get annotations using BiomaRt----
# The annotation method described in the code chunk above works great if an organism-specific data base package exists for your organisms of interest
# however, this is only the case for human, mouse and rat....
# so, this optional code chunk shows one way you can get annotation data for other target organisms
# in this example, we're retrieving 1:1 mappings between transcript identifiers and gene symbols for the domesticated dog (Canis familiaris)
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
available.datasets
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
dog.filters <- listFilters(dog.anno)
dog.filters
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
available.datasets
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
dog.filters <- listFilters(dog.anno)
dog.filters
dog.filters
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
dog.filters <- listFilters(dog.anno)
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "choffmanni_gene_ensembl")
Tx.dog <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = dog.anno)
Tx.dog <- as_tibble(Tx.dog)
Tx.dog
#we need to rename the two columns we just retreived from biomart
Tx.dog <- dplyr::rename(Tx.dog, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
ggarrange(M_amb_123, M_low_123,F_amb_123, F_low_123
M_amb_221, M_low_221, F_amb_221, F_low_221,  ncol = 4, nrow = 2)
#Title: Pgenerosa histology staging analysis
#Project: FFAR
#Author: Sam Gurr
#Edit by: Sam Gurr
#Date Last Modified: 20200716
#See Readme file for details
rm(list=ls())
# Load packages and pacage version/date/import/depends info
library(dplyr)          # Version 0.7.6, Packaged: 2018-06-27, Depends: R (>= 3.1.2)Imports: assertthat (>= 0.2.0), bindrcpp (>= 0.2.0.9000), glue (>=1.1.1), magrittr (>= 1.5), methods, pkgconfig (>= 2.0.1), R6(>= 2.2.2), Rcpp (>= 0.12.15), rlang (>= 0.2.0), tibble (>=1.3.1), tidyselect (>= 0.2.3), utils
library(ggplot2)        # Version 2.2.1, Packaged: 2016-12-30, Depends: R (>= 3.1)Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
library(tidyr)
library(ggpubr)
#set working directory--------------------------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Pgenerosa_histology/RAnalysis/") #set working
# upload data
data<-read.csv("Data/Staging/Hist_Staging_Kaitlyn.csv", header=T, sep=",", na.string="NA", as.is=T)
data # view data
# RE: 'Stage' and 'Staging_number' columns
# Immature: very early active (1),
# early active (2))
# Mature: late active (3)
# ripe (4))
# Spent (5)
data_pull <- data %>% dplyr::select(c('Tank','Treatment','Date', 'Sex', 'Geoduck_ID', 'Staging_number', 'Stage_ID'))
data_pull$Staging_number <- as.character(data_pull$Staging_number)
# calcaulate the proportions of staging number by date and treatment
prop_ALL <-
data_pull %>%
group_by(Date, Treatment, Sex, Stage_ID) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
prop_ALL$prop <- prop_ALL$freq*100
prop_Jan23_Female <- prop_ALL %>% dplyr::filter('123' %in% Date) %>%  dplyr::filter('F' %in% Sex)
prop_Jan23_Male <- prop_ALL %>% dplyr::filter('123' %in% Date) %>%  dplyr::filter('M' %in% Sex)
prop_Feb21_Female <- prop_ALL %>% dplyr::filter('221' %in% Date) %>%  dplyr::filter('F' %in% Sex)
prop_Feb21_Male <- prop_ALL %>% dplyr::filter('221' %in% Date) %>%  dplyr::filter('M' %in% Sex)
### separate datasets for six, date, and treatment
# female
prop_Jan23_Female_Amb <- prop_Jan23_Female %>%
dplyr::filter('Ambient' %in% Treatment)
prop_Jan23_Female_Low <- prop_Jan23_Female %>%
dplyr::filter('Low' %in% Treatment)
prop_Feb21_Female_Amb <- prop_Feb21_Female %>%
dplyr::filter('Ambient' %in% Treatment)
prop_Feb21_Female_Low <- prop_Feb21_Female %>%
dplyr::filter('Low' %in% Treatment)
# Male
prop_Jan23_Male_Amb <- prop_Jan23_Male %>%
dplyr::filter('Ambient' %in% Treatment)
prop_Jan23_Male_Low <- prop_Jan23_Male %>%
dplyr::filter('Low' %in% Treatment)
prop_Feb21_Male_Amb <- prop_Feb21_Male %>%
dplyr::filter('Ambient' %in% Treatment)
prop_Feb21_Male_Low <- prop_Feb21_Male %>%
dplyr::filter('Low' %in% Treatment)
# DONUT PLOTS
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
F_amb_123 <- ggdonutchart(prop_Jan23_Female_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00"))
F_low_123 <- ggdonutchart(prop_Jan23_Female_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2"))
F_amb_221 <- ggdonutchart(prop_Feb21_Female_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
F_low_221 <- ggdonutchart(prop_Feb21_Female_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00"))
M_amb_123 <- ggdonutchart(prop_Jan23_Male_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Ambient_0123",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
M_low_123 <- ggdonutchart(prop_Jan23_Male_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Low_0123",
fill = "Stage_ID", color = "white", palette = c("#56B4E9","#CC79A7"))
M_amb_221 <- ggdonutchart(prop_Feb21_Male_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Ambient_0221",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
M_low_221 <- ggdonutchart(prop_Feb21_Male_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Low_0221",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
ggarrange(M_amb_123, M_low_123,F_amb_123, F_low_123
M_amb_221, M_low_221, F_amb_221, F_low_221,  ncol = 4, nrow = 2)
ggarrange(M_amb_123, M_low_123,F_amb_123, F_low_123,
M_amb_221, M_low_221, F_amb_221, F_low_221,  ncol = 4, nrow = 2)
# DONUT PLOTS
F_amb_123 <- ggdonutchart(prop_Jan23_Female_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Female_Ambient_0123",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00"))
F_low_123 <- ggdonutchart(prop_Jan23_Female_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Female_Low_0123",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2"))
F_amb_221 <- ggdonutchart(prop_Feb21_Female_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Female_Ambient_0221",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
F_low_221 <- ggdonutchart(prop_Feb21_Female_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Female_Low_0221",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00"))
M_amb_123 <- ggdonutchart(prop_Jan23_Male_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Ambient_0123",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
M_low_123 <- ggdonutchart(prop_Jan23_Male_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Low_0123",
fill = "Stage_ID", color = "white", palette = c("#56B4E9","#CC79A7"))
M_amb_221 <- ggdonutchart(prop_Feb21_Male_Amb, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Ambient_0221",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
M_low_221 <- ggdonutchart(prop_Feb21_Male_Low, "prop", label = "Stage_ID",
lab.pos = "in", lab.size = 10, lab.font = "white",
title = "Male_Low_0221",
fill = "Stage_ID", color = "white", palette = c("#56B4E9", "#0072B2", "#D55E00", "#999999"))
ggarrange(M_amb_123, M_low_123,F_amb_123, F_low_123,
M_amb_221, M_low_221, F_amb_221, F_low_221,  ncol = 4, nrow = 2)
